











import React, { useEffect, useState } from "react";
import HeaderMain from "./HeaderMain";
import { useStateValue } from "./StateProvider";
import axios from "axios";
import "./Home.css";
import "./OneMovie.css";

function OneMovie() {
  const [state, action] = useStateValue(); // get movie id by state.movieId
  const [movieInfo, setMovieInfo] = useState([]);
  const [cast, setCast] = useState([]);
  console.log("onemovie: " + state.movieId);

  useEffect(async () => {
    let response = await axios({
      //url: `https://api.themoviedb.org/3/movie/${state.movieId}?api_key=${process.env.REACT_APP_FIREBASE_imdb}`,
      url: `https://api.themoviedb.org/3/movie/190138?api_key=${process.env.REACT_APP_FIREBASE_imdb}`,
      method: "GET",
    });

    let response2 = await axios({
      //url: `https://api.themoviedb.org/3/movie/${state.movieId}/credits?api_key=${process.env.REACT_APP_FIREBASE_imdb}`,
      url: `https://api.themoviedb.org/3/movie/190138/credits?api_key=${process.env.REACT_APP_FIREBASE_imdb}`,
      method: "GET",
    });
    setMovieInfo(response.data);
    setCast(response2.data);
  }, []);
  let imgUrl = `https://image.tmdb.org/t/p/original/${movieInfo.poster_path}`;

  const genres = () => {
    try {
      return movieInfo.genres.slice(0, 3);
    } catch {
      console.log(movieInfo);
    }
  };

  const actors = () => {
    try {
      return cast.cast
        .map((actor) => actor.name)
        .slice(0, 3)
        .map((genre) => " " + genre)
        .toString();
    } catch {}
  };

  const director = () => {
    try {
      return cast.crew.find((c) => c.job === "Director").name;
    } catch {
      console.log();
    }
  };
  const overview = () => {
    try {
      return movieInfo.overview;
    } catch {
      console.log(movieInfo);
    }
  };
  return (
    <div className="onemovie">
      <HeaderMain></HeaderMain>
      <div className="home">
        <div className="home__container">
          <img className="home__img" src="./lights.png" alt="" />
        </div>
      </div>

      <div className="movie__container">
        <div>
          <div>{} </div>

          <div className="moviename">
            {movieInfo.title}
            <span className="movieyear">
              {" "}
              ({String(movieInfo.release_date).substr(0, 4)})
            </span>
          </div>
          <div className="content__container">
            <div className="left__container">
              <img src={imgUrl} className="poster" alt="movie_poster" />
              <div className="tagline">{movieInfo.tagline}</div>
            </div>
            <div className="right__container">
              <div className="rating">
                <span className="rating__title">RATING</span>
                <span className="rating__count">{movieInfo.vote_average}</span>
              </div>
              <div className="info">
                <span className="info__title">Genre: </span>
                <span className="info__value">{genres()}</span>
                <span className="info__title">Cast: </span>
                <span className="info__value">{actors()}</span>
                <span className="info__title">Director: </span>
                <span className="info__value">{director()}</span>
                <span className="info__overview">{overview()}</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default OneMovie;



 <div className="home">
      <div className="home__container">
        <img className="home__image" src="./lights.png" alt="" />

        <div className="home__row" style={style}>
          <MovieHomePage
            title="Sample Movie"
            image="https://images-na.ssl-images-amazon.com/images/I/71tUSFn3W0L._AC_SL1000_.jpg"
            genres="Mystery, Supernatural, Action"
            rating="9.0"
          />
          <MovieHomePage
            title="Sample Movie"
            image="https://images-na.ssl-images-amazon.com/images/I/71tUSFn3W0L._AC_SL1000_.jpg"
            genres="Mystery, Supernatural, Action"
            rating="9.0"
          />
          <MovieHomePage
            title="Sample Movie"
            image="https://images-na.ssl-images-amazon.com/images/I/71tUSFn3W0L._AC_SL1000_.jpg"
            genres="Mystery, Supernatural, Action"
            rating="9.0"
          />
          <MovieHomePage
            title="Sample Movie"
            image="https://images-na.ssl-images-amazon.com/images/I/71tUSFn3W0L._AC_SL1000_.jpg"
            genres="Mystery, Supernatural, Action"
            rating="9.0"
          />
        </div>

        <div className="home__row" style={style}>
          <MovieHomePage
            title="Sample Movie"
            image="https://images-na.ssl-images-amazon.com/images/I/71tUSFn3W0L._AC_SL1000_.jpg"
            genres="Mystery, Supernatural, Action"
            rating="9.0"
          />
          <MovieHomePage
            title="Sample Movie"
            image="https://images-na.ssl-images-amazon.com/images/I/71tUSFn3W0L._AC_SL1000_.jpg"
            genres="Mystery, Supernatural, Action"
            rating="9.0"
          />
          <MovieHomePage
            title="Sample Movie"
            image="https://images-na.ssl-images-amazon.com/images/I/71tUSFn3W0L._AC_SL1000_.jpg"
            genres="Mystery, Supernatural, Action"
            rating="9.0"
          />
          <MovieHomePage
            title="Sample Movie"
            image="https://images-na.ssl-images-amazon.com/images/I/71tUSFn3W0L._AC_SL1000_.jpg"
            genres="Mystery, Supernatural, Action"
            rating="9.0"
          />
        </div>

        <div className="home__row" style={style}>
          <MovieHomePage
            title="Sample Movie"
            image="https://images-na.ssl-images-amazon.com/images/I/71tUSFn3W0L._AC_SL1000_.jpg"
            genres="Mystery, Supernatural, Action"
            rating="9.0"
          />
          <MovieHomePage
            title="Sample Movie"
            image="https://images-na.ssl-images-amazon.com/images/I/71tUSFn3W0L._AC_SL1000_.jpg"
            genres="Mystery, Supernatural, Action"
            rating="9.0"
          />
          <MovieHomePage
            title="Sample Movie"
            image="https://images-na.ssl-images-amazon.com/images/I/71tUSFn3W0L._AC_SL1000_.jpg"
            genres="Mystery, Supernatural, Action"
            rating="9.0"
          />
          <MovieHomePage
            title="Sample Movie"
            image="https://images-na.ssl-images-amazon.com/images/I/71tUSFn3W0L._AC_SL1000_.jpg"
            genres="Mystery, Supernatural, Action"
            rating="9.0"
          />
        </div>
      </div>
    </div>



    .lights {
  margin-bottom: 10rem;
  background-color: #2c2c2c;
  width: 100%;
}
.home__image {
  margin-bottom: 1rem;
  margin-top: 1rem;
  background-color: #2c2c2c;
  width: 100%;
  float: center;
}

.home__container {
  background-color: #2c2c2c;
}
.home {
  background-color: #2c2c2c;
  display: flex;
  justify-content: center;
}

.home__row {
  display: flex;
  z-index: 1;
  margin-left: 0rem;
  margin-right: rem;
  margin-top: 4rem;
}


HeaderMain 
import React, { useState } from "react";
import { Link, useHistory } from "react-router-dom";
import "./HeaderMain.css";
import SearchIcon from "./icons/SearchIcon.svg";
import { useStateValue } from "./StateProvider";
import { fireAuth } from "./firebase";
import { animations } from "react-animation";
import Searchbar2 from "./Searchbar2.js";

function HeaderMain() {
  const style = {
    animation: animations.fadeIn,
  };
  const [state, action] = useStateValue(); // get user by state.user and get reviews by state.reviews
  const history = useHistory();
  const handleLogInOrReviews = () => {
    console.log(state.user);
    console.log(process.env.REACT_APP_FIREBASE_apiKey, "api key");
    if (state.user) {
      // is there someone logged in????
      console.log(state.user);
      // go to reviews page
      history.push("./reviews"); //redirect to the reviews path
    } else {
      history.push("./login");
    }
  };

  const handleCreateOrLogOut = () => {
    if (state.user) {
      // is there someone logged in????
      console.log(state.user);
      fireAuth.signOut();
      localStorage.setItem("user", null);
      history.push("./");
      // go to reviews page
    } else {
      history.push("./signup");
    }
  };
  return (
    <div className="header">
      <Link to="/">
        <img
          className="header__logo"
          src="logomovie.png"
          alt="logo"
          style={style}
        />
      </Link>

      <Searchbar2></Searchbar2>

      <div className="header__nav" style={style}>
        <div onClick={handleLogInOrReviews} className="header__option">
          <span className="header__optionLog">
            {!state.user ? "log in" : "reviews"}
          </span>
        </div>

        <div onClick={handleCreateOrLogOut} className="header__option">
          <span className="header__optionSign">
            {!state.user ? "create account" : "log out"}
          </span>
        </div>
      </div>
    </div>
  );
}

export default HeaderMain;



import React, { useEffect, useState } from "react";
import HeaderMain from "./HeaderMain";
import { useStateValue } from "./StateProvider";
import { fireAuth, fireDb } from "./firebase";
import axios from "axios";
import "./Home.css";
import "./OneMovie.css";
import { Link } from "react-router-dom";
import Review from "./Review";
import CreateReview from "./CreateReview";
import { animations } from "react-animation";

function OneMovie() {
  const [state, action] = useStateValue(); // get movie id by state.movieId
  const [movieInfo, setMovieInfo] = useState([]);
  const [cast, setCast] = useState([]);
  const [sign, setSign] = useState("");
  const [toreview, setToreview] = useState("");
  const [movies, setMovies] = useState([]);
  const [count, setCount] = useState(0);

  let h = [];
  let reloadMovie;
  const style = {
    animation: animations.fadeIn,
  };
  useEffect(async () => {
    if (state.movieId) {
      reloadMovie = state.movieId;
      console.log(
        reloadMovie,
        "reload",
        "movieId",
        state.movieId,
        "while localStorage has " + localStorage.movieId
      );
    } else {
      reloadMovie = localStorage.movieId;
      console.log(reloadMovie, "reload", "localStorage", localStorage.movieId);
    }
    if (!fireAuth.currentUser && localStorage.user == "null") {
      setSign("Sign in");
      setToreview("to see your reviewed movies");
    }

    if (fireAuth.currentUser) {
      try {
        fireDb
          .ref("users/" + fireAuth.currentUser?.uid + "/" + reloadMovie)
          .on("value", (snapshot) => {
            snapshot.forEach((snap) => {
              h.push(snap.val());
            });
            setMovies(h);
            setCount(h.length);
          });
      } catch {
        //console.log("no review");
      }
    } else {
      try {
        fireDb
          .ref("users/" + localStorage.user + "/" + reloadMovie)
          .on("value", (snapshot) => {
            snapshot.forEach((snap) => {
              h.push(snap.val());
            });
            setMovies(h);
            setCount(h.length);
          });
      } catch {
        //console.log("no review");
      }
    }
    let response = await axios({
      url: `https://api.themoviedb.org/3/movie/${reloadMovie}?api_key=${process.env.REACT_APP_FIREBASE_imdb}`,
      method: "GET",
    });

    let response2 = await axios({
      url: `https://api.themoviedb.org/3/movie/${reloadMovie}/credits?api_key=${process.env.REACT_APP_FIREBASE_imdb}`,
      method: "GET",
    });
    setMovieInfo(response.data);
    console.log(movieInfo);
    setCast(response2.data);
  }, []);
  let imgUrl;
  if (movieInfo.poster_path) {
    imgUrl = `https://image.tmdb.org/t/p/original/${movieInfo.poster_path}`;
  } else {
    imgUrl = "./error.png";
  }

  const genres = () => {
    try {
      return movieInfo.genres
        .slice(0, 3)
        .map((genre) => " " + genre.name)
        .toString();
    } catch {
      return "no genres found";
    }
  };

  const actors = () => {
    try {
      return cast.cast
        .map((actor) => actor.name)
        .slice(0, 3)
        .map((genre) => " " + genre)
        .toString();
    } catch {
      return "no actors found in the database";
    }
  };

  const director = () => {
    try {
      return cast.crew.find((c) => c.job === "Director").name;
    } catch {
      return "no director found in the database";
    }
  };
  const overview = () => {
    try {
      return movieInfo.overview;
    } catch {
      return "no plot summary found in the database";
    }
  };

  const test = () => {
    if (!fireAuth.currentUser && localStorage.user == "null") {
      return (
        <span className="review__spans">
          <Link to="login" style={{ color: "#a19ff2" }}>
            {sign}
          </Link>{" "}
          <span className="review__spant">{toreview}</span>
        </span>
      );
    }
    if (movies.length !== 0) {
      return (
        <div className="review__true">
          <Review rating={movies[0].rating} review={movies[0].review} />
        </div>
      );
    } else {
      return (
        <CreateReview
          movieId={state.movieId ? state.movieId : localStorage.movieId}
        />
      );
    }
  };

  return (
    <div className="onemovie" style={style}>
      <div className="home">
        <img className="home__image" src="./lights.png" alt="" />
        <div className="home__container"></div>
      </div>

      <div className="movie__container">
        <div>
          <div>{} </div>

          <div className="moviename">
            {movieInfo.title}
            <span className="movieyear">
              {" "}
              ({String(movieInfo.release_date).substr(0, 4)})
            </span>
          </div>
          <div className="content__container">
            <div className="left__container">
              <img src={imgUrl} className="poster" alt="movie_poster" />
              <div className="tagline">{movieInfo.tagline}</div>
            </div>
            <div className="right_container">
              <div className="rating">
                <span className="rating__title">RATING</span>
                <span className="rating__count">{movieInfo.vote_average}</span>
              </div>
              <div className="info">
                <div className="info__container">
                  <span className="info__title">Genre: </span>
                  <span className="info__value">{genres()}</span>
                </div>
                <div className="info__container">
                  <span className="info__title">Director: </span>
                  <span className="info__value">{director()}</span>
                </div>
                <div className="info__container">
                  <span className="info__title">Cast: </span>
                  <span className="info__value">{actors()}</span>
                </div>
                <div className="info__container">
                  <span className="info__overview">{overview()}</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="your_review">{test()}</div>
    </div>
  );
}

export default OneMovie;



import React, { useEffect, useState } from "react";
import "./MovieHomePage.css";
import { fireAuth, fireDb } from "./firebase";
import { useStateValue } from "./StateProvider";
import { Link, useHistory } from "react-router-dom";

function MovieHomePage({ image, title, genres, rating, id }) {
  const history = useHistory();
  const [tooBig, setTooBig] = useState(false);
  const [state, dispatch] = useStateValue();
  const linkToOneMovie = (e) => {
    //localStorage.setItem("movieId", 2);
    let movId = e.currentTarget.id;
    localStorage.setItem("movieId", movId);
    dispatch({
      type: "SET_MOVIE_ID",
      movieId: movId,
    });
    history.push("/onemovie");
  };
  return (
    <div className="movie">
      <div className="movie__rating">
        <span>{rating}</span>
        <img src={image} alt="movie_poster" id={id} onClick={linkToOneMovie} />
      </div>
      <h1 className="movie__title">{title}</h1>
      <p className="movie__genres">{genres}</p>
    </div>
  );
}

export default MovieHomePage;


import React, { useState } from "react";
import SearchIcon from "./icons/SearchIcon.svg";
import autocomplete from "./Autocomplete.js";
import { Link } from "react-router-dom";
import { useStateValue } from "./StateProvider";
// import { debounce } from "debounce";
import "./HeaderMain.css";
import "./Searchbar.css";

const searchUrl =
  "https://api.themoviedb.org/3/search/movie?api_key=" +
  process.env.REACT_APP_FIREBASE_imdb +
  "&query=";

function httpGetMovies(title) {
  let response = fetch(searchUrl + title)
    .then((response) => response.json())
    .then((data) => data.results);
  return response;
}

function Searchbar2() {
  const [search, setSearch] = useState("");
  const [state, dispatch] = useStateValue();

  return (
    <div className="header__search">
      <form autoComplete="off">
        <p className="autocomplete">
          <input
            className="header__searchInput"
            id="myInput"
            type="text"
            data-mid=""
            onChange={async function (e) {
              setSearch(e.target.value);
              let searchtitle = await httpGetMovies(search);
              autocomplete(document.getElementById("myInput"), searchtitle);
            }}
            placeholder="search for a movie..."
          />
        </p>
      </form>
      <Link to="/onemovie">
        <button
          className="searchbutton header__searchIcon"
          onClick={function () {
            let mid = document
              .getElementById("myInput")
              .getAttribute("data-mid");
            dispatch({
              type: "SET_MOVIE_ID",
              movieId: mid,
            });
            localStorage.setItem("movieId", mid);
          }}
        >
          <img src={SearchIcon} id="searchicon" alt="search" />
        </button>
      </Link>
    </div>
  );
}

export default Searchbar2;

export default function autocomplete(input, array) {
  if (array) {
    let curFocus;

    input.addEventListener("input", function(e) {
    let a,
      b,
      i,
      val = input.value;

    //Closes any open list of autocomplete values
    closeAllLists();
    if (!val) {
      return false;
    }
    curFocus = -1;
    a = document.createElement("div");

    //div that contains suggestions
    a.setAttribute("id", input.id + "autocomplete-list");
    a.setAttribute("class", "autocomplete-items");
    this.parentNode.appendChild(a);

        for(i = 0; i < array.length; i++) {
            //Check if item starts with same letters as text field value
            if(array[i].title.substring(0, val.length).toUpperCase() === val.toUpperCase()) {
                //Make div for matching element
                b = document.createElement("div");
                //Make matching letters bold
                b.innerHTML = "<strong>" + array[i].title.substring(0, val.length) + "</strong>";
                b.innerHTML += array[i].title.substring(val.length);
                b.innerHTML += "  (" + array[i].release_date.substring(0, 4) + ")";
                //Make new input field that holds current array item's value
                b.innerHTML += "<input type='hidden' value='" + array[i].title + " (" + array[i].release_date.substring(0, 4) + ")' data-mid=" + array[i].id + ">";
                //Execute function when someone clicks on a suggestion
                b.addEventListener("click", function(e) {
                    //Insert value for autocomplete text field
                    input.value = this.getElementsByTagName("input")[0].defaultValue;
                    //Close list of autocompleted values
                    closeAllLists();
                    //Returns data-mid with the movie id
                    // return this.children[1].getAttribute("data-mid");
                    input.setAttribute("data-mid", this.children[1].getAttribute("data-mid"));
                });
                a.appendChild(b);
            }
        }
    });

        //Execute a function on keypresses
        let fired = false;
        input.addEventListener("keydown", function(e) {
            if(!fired) {
                fired = true;
                let x = document.getElementById(input.id + "autocomplete-list");
                if(x) {
                    x = x.getElementsByTagName("div");
                }
                if(e.keyCode === 40) {
                    //Down key press => increase curFocus
                    curFocus++;
                    //Make current item more visible
                    addActive(x);
                } else if(e.keyCode === 38) {
                    //Up key press => decrease curFocus
                    curFocus--;
                    //Make current item more visible
                    addActive(x);
                } else if(e.keyCode === 13) {
                    //Enter key is pressed, prevent form from being submitted
                    e.preventDefault();
                    if(curFocus > -1) {
                        //Simulate a click on active item
                        if(x) {
                            x[curFocus].click();
                            // console.log("in autocomplete: " + x[curFocus].children[1].getAttribute("data-mid"));
                            // return x[curFocus].children[1].getAttribute("data-mid");
                            input.setAttribute("data-mid", x[curFocus].children[1].getAttribute("data-mid"));
                        }
                    }
                }
            }
        });
        // a.appendChild(b);

    input.addEventListener("keyup", function (e) {
      fired = false;
    });

    function addActive(x) {
      //Function to classify if item is active
      if (!x) {
        return false;
      }
      removeActive(x);
      if (curFocus >= x.length) {
        curFocus = 0;
      }
      if (curFocus < 0) {
        curFocus = x.length - 1;
      }

      //Add class "autocomplete-active"
      x[curFocus].classList.add("autocomplete-active");
    }

    function removeActive(x) {
      //Function to remove active class from autocomplete list
      for (let i = 0; i < x.length; i++) {
        x[i].classList.remove("autocomplete-active");
      }
    }

    function closeAllLists(elt) {
      //Close all autocomplete lists
      let x = document.getElementsByClassName("autocomplete-items");
      for (let i = 0; i < x.length; i++) {
        if (elt !== x[i] && elt !== input) {
          x[i].parentNode.removeChild(x[i]);
        }
      }
    }

    document.addEventListener("click", function (e) {
      closeAllLists(e.target);
    });
  }
}
